(in-package #:cl-game-models)

(defparameter *g* 9.81)

(defparameter *gfeet* 32.2)

(defparameter *pi* (/ 22 7.0))

;ensure that R * g <= v^2
;where v = initial velocity
;and R = range
(defun tilt-angle (initial-velocity range)
  (/ (asin (/ (* range *g*) 
	      (* initial-velocity initial-velocity))) 
     2))

(defun angle->radians (angle)
  (* (/ pi 180.0) angle))

(defun radians->angle (radians)
  (* (/ 180.0 pi) radians))

;initial velocity is ball speed after hitting the bat
;http://www.phy.cmich.edu/people/andy/Physics110/Book/Chapters/Chapter2.htm
;from
(defun compute-stroke-trajectory (h xpeak swivel vel0x yrot)
  ;(format t " --- Computing bowling trajectory BEFORE pitching --- ~% ")
  (let* ((swivel-angle (angle->radians swivel))
	 (vel0y (sqrt (* 2 h *g*))) 
	 (tpeak (/ vel0y *g*))
	 (vel0x (/ xpeak tpeak))
	 (tmax (* 2 tpeak))
	 (yrot-angle (angle->radians yrot))
	 (cos-yrot (cos yrot-angle))
	 (sin-yrot (sin yrot-angle))
	 (acc))
    (do ((i 0 (+ i (/ 1 24.0))))
 	((> i tmax))
     ;(format t "~A ~A ~%" i tmax)
     (let* ((x (* (* vel0x i) (tan swivel-angle)))
	    (y (- (* vel0y i) (/ (* *g* i i) 2)))
	    (z (- (* vel0x i)))
	    (x-yrot (+ (* x cos-yrot) (* z sin-yrot)))
	    (z-yrot (+ (- (* x sin-yrot)) (* z cos-yrot))))
       (push (mapcar #'(lambda (elt) (coerce elt 'single-float))
		      (list x-yrot y z-yrot))
	     acc)))
   (format t " ---- points are ~A ~% " (reverse acc)) 
   (nreverse acc)))

(defun compute-stroke-trajectory2 (h xpeak swivel velocity x2 yrot ground-stroke override start-height)
  ;(format t " --- Computing STROKE trajectory from --- ~A to -->  ~A ~% " xpeak x2)
  (let* ((points1 (cond ((and ground-stroke override) ;;;this is for hook / pull / square cut/ late cut shots played along the ground
		    	 (compute-bowling-trajectory-before-pitching start-height (/ xpeak 2.0) swivel velocity))
		        (ground-stroke  
		          (list (list 0.0 start-height 0.0)))
			((null ground-stroke) 
			 (remove nil
			   (mapcar #'(lambda (point)
				       (if (>= (second point) start-height)
					 point))
				   (append (list (list 0.0 start-height 0.0))
					   (few-extra-trajectory-points h 0.0 (/ xpeak 2.0) 
									swivel velocity)
					   (compute-stroke-trajectory-before-landing h (/ xpeak 2.0) 
										     swivel velocity)))))
			(t nil)))
	 (points2 (compute-stroke-trajectory-after-landing xpeak x2 swivel velocity))
	 (points (append points1 points2)) 
	 (swivel-angle (angle->radians swivel))
	 (vel0y (sqrt (* 2 h *g*))) 
	 (tpeak (/ vel0y *g*))
	 (vel0x (/ xpeak tpeak))
	 (tmax (* 2 tpeak))
	 (yrot-angle (angle->radians yrot))
	 (cos-yrot (cos yrot-angle))
	 (sin-yrot (sin yrot-angle))
	 (acc))
   (dolist (point points)
     (let* ((x (first point)) (y (second point)) (z (third point))
	    (x-yrot (- (* x cos-yrot) (* z sin-yrot)))
	    (z-yrot (+ (* x sin-yrot) (* z cos-yrot))))
       (format t " point rotated : (x ~A -> ~A) (y ~A -> ~A) (z ~A -> ~A) ~%" x x-yrot y y z z-yrot)
	 (push (mapcar #'(lambda (elt) (coerce elt 'single-float))
			(list x-yrot y z-yrot))
	       acc)))
     ;(format t " ---- points are ~A ~% " (reverse acc)) 
     (nreverse acc)))

(defun compute-stroke-trajectory-after-landing (x1 x2 swivel vel0x)
  (let* ((swivel-angle (angle->radians swivel))
	 (tmax (/ (- x2 x1) vel0x))
	 (acc))
    (do ((i 0 (+ i (/ 1 24.0))))
 	((> i tmax))
     ;(format t "~A ~A ~%" i tmax)
     (push (mapcar #'(lambda (elt) (coerce elt 'single-float))
	          (list (* (* vel0x i) (tan swivel-angle))
			0.001
			(- (+ x1 (* vel0x i)))))
	   acc))
   ;(format t " ---- points are ~A ~% " (reverse acc)) 
   (nreverse acc)))

(defun compute-stroke-trajectory-before-landing (h xpeak swivel velocity)
  (compute-bowling-trajectory-after-pitching2 h 0.0 xpeak swivel velocity t))

;from
;http://hyperphysics.phy-astr.gsu.edu/hbase/traj.html#tra10

(defun compute-bowling-trajectory (h xpeak swivel1 swivel2 angle velocity factor)
  (append (compute-bowling-trajectory-before-pitching h xpeak swivel1 velocity)
	  (compute-bowling-trajectory-after-pitching xpeak (* factor velocity) angle swivel2)))

;(append (compute-bowling-trajectory-before-pitching h1 xpeak1 swivel1 velocity)
(defun compute-bowling-trajectory2 (h1 xpeak1 swivel1 h2 xpeak2 swivel2 velocity)
  (compute-bowling-trajectory-after-pitching2 h2 xpeak1 xpeak2 swivel2 velocity))

(defun compute-bowling-trajectory-before-pitching (h xpeak swivel vel0x)
  ;(format t " --- Computing bowling trajectory BEFORE pitching --- ~% ")
  (let* ((swivel-angle (angle->radians swivel))
	 (vel0y (sqrt (* 2 h *g*))) 
	 (tpeak (/ vel0y *g*))
	 (vel0x (/ xpeak tpeak))
	 (tmax (* 2 tpeak))
	 (acc))
    (do ((i tpeak (+ i (/ 1 24.0))))
 	((> i tmax))
     ;(format t "~A ~A ~%" i tmax)
     (push (mapcar #'(lambda (elt) (coerce elt 'single-float))
	          (list (* (* vel0x i) (tan swivel-angle))
			(- (* vel0y i) (/ (* *g* i i) 2))
			(- xpeak (* vel0x i))))
	   acc))
   ;(format t " ---- points are ~A ~% " (reverse acc)) 
   (nreverse acc))) 

(defun few-extra-trajectory-points (h xpeak1 xpeak swivel vel0x)
  ;(format t " --- Computing bowling trajectory BEFORE pitching --- ~% ")
  (let* ((swivel-angle (angle->radians swivel))
	 (vel0y (sqrt (* 2 h *g*))) 
	 (tpeak (/ vel0y *g*))
	 (vel0x (/ xpeak tpeak))
	 (tmax (* 2 tpeak))
	 (acc))
    (do ((i 0 (+ i (/ 1 96.0))))
 	((> i (/ 1 24.0)))
     ;(format t "~A ~A ~%" i tmax)
     (push (mapcar #'(lambda (elt) (coerce elt 'single-float))
	          (list (* (* vel0x i) (tan swivel-angle))
			(- (* vel0y i) (/ (* *g* i i) 2))
			(- (+ xpeak1 (* vel0x i)))))
	   acc))
   (format t " ---- extra points are ~A ~% " (reverse acc)) 
   (nreverse acc)))

(defun compute-bowling-trajectory-after-pitching2 (h xpeak1 xpeak swivel vel0x &optional all-points)
  ;(format t " --- Computing bowling trajectory BEFORE pitching --- ~% ")
  (let* ((swivel-angle (angle->radians swivel))
	 (vel0y (sqrt (* 2 h *g*))) 
	 (tpeak (/ vel0y *g*))
	 (vel0x (/ xpeak tpeak))
	 (tmax (* 2 tpeak))
	 (acc))
    (do ((i 0 (+ i (/ 1 24.0))))
 	((> i (if all-points tmax tpeak)))
     ;(format t "~A ~A ~%" i tmax)
     (push (mapcar #'(lambda (elt) (coerce elt 'single-float))
	          (list (* (* vel0x i) (tan swivel-angle))
			(- (* vel0y i) (/ (* *g* i i) 2))
			(- (+ xpeak1 (* vel0x i)))))
	   acc))
   ;(format t " ---- points are ~A ~% " (reverse acc)) 
   (nreverse acc)))

(defun compute-bowling-trajectory-after-pitching (xpeak velocity angle swivel)
  ;(format t " --- Computing bowling trajectory AFTER pitching --- ~% ")
  (let* ((swivel-angle (angle->radians swivel))
	 (radians (angle->radians angle))
	 (vel0x (* velocity (cos radians))) 
         (vel0y (* velocity (sin radians)))
         (tpeak (/ vel0y *g*))
	 (tmax (* 2 tpeak))
	 (acc))
    (do ((i 0.0 (+ i (/ 1 24.0))))
	((> i tmax))
     ;(format t "~A ~A ~%" i tmax)
     (push (mapcar #'(lambda (elt) (coerce elt 'single-float))
		   (list (* (* vel0x i) (tan swivel-angle))
		     	 (- (* vel0y i) (/ (* *g* i i) 2))
		     	 (- (+ xpeak (* vel0x i)))))
	   acc))
   ;(format t " ---- points are ~A ~% " (reverse acc)) 
   (nreverse acc))) 

(in-package #:cl-game-models)

(defun load-anim (file)
  (format t "--- inside load-anim ~%" )
  (let ((lines (file-lines file))
	(md5anim (make-instance 'md5anim))
	(all-frames))
   (with-slots (version num-of-frames num-of-joints frame-rate
		num-of-anim-comps hierarchy boxes baseframe frames) md5anim
     (do ((n 0 (+ n 1)))
	 ((= n (length lines)))
       (let ((line (nth n lines)))
	 (cond ((version? line)
		(setf version (parse-version line)))
	       ((n-frames? line)
		(setf num-of-frames (parse-n-frames line)))
	       ((n-joints? line)
		(setf num-of-joints (parse-n-joints line)))
	       ((frame-rate? line)
		(setf frame-rate (parse-frame-rate line)))
	       ((n-anim-comps? line)
		(setf num-of-anim-comps (parse-n-anim-comps line)))
	       ((hierarchy? line)
		(setf hierarchy 
		      (parse-hierarchy (subseq lines (+ n 1) 
						     (+ n num-of-joints 1))))
		(setf n (+ n num-of-joints 2)))
		((bounds? line)
		 (setf boxes 
		       (parse-bounds (subseq lines (+ n 1) 
						   (+ n num-of-frames 1))))
		(setf n (+ n num-of-frames 2)))
	       ((baseframe? line)
		(setf baseframe 
		      (parse-baseframe (subseq lines (+ n 1) 
						     (+ n num-of-joints 1))))
		(setf n (+ n num-of-joints 2)))
	       ((frame? line)
		(let ((frame (make-instance 'frame)))
		  (with-slots (index anim-comps) frame
		    (setf index (parse-frame line)
			  anim-comps (parse-frame-details (subseq lines (+ n 1) 
									(+ n num-of-joints 1))))
		    (push frame all-frames)
		    (setf n (+ n num-of-joints 2)))))
	       (t nil))))
   (setf frames (nreverse all-frames)))
   md5anim))

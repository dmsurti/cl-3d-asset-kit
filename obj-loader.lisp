(in-package #:cl-game-models)

(defun load-obj (file)
  (format t "--- inside load-obj ~A ~%" file)
  (let ((lines (file-lines file))
	(wfmesh (make-instance 'meshes))
	(all-meshes) (nv 1) (nvt 1) (nvn 1)) 
   (with-slots (num-of-meshes meshes) wfmesh
     (do ((n 0 (+ n 1)))
	 ((= n (length lines)))
       (let ((line (nth n lines)))
	 (if (wfobj? line)
	   (let ((wfmesh (make-instance 'mesh))	
		 (m-texture-keys (make-hash-table :test #'equal))
		 (m-vertexes) (m-triangles) (m-textures) (m-normals))
	     (with-slots (name num-of-vertices vertices texture-key 
			  num-of-triangles triangles orig-vertexes orig-triangles
			  orig-textures orig-normals texture-keys) wfmesh 
	       (format t "Loading a new mesh at line .... ~A ~%" n)
	       (setf name (parse-wfobj line))
	       (do ((i (+ n 1) (+ i 1)))
		   ((cond ((wfobj? (nth i lines))
			   (setf i (- n 1))
			   t) ; reset pointer back so we don't miss next mesh
			  ((= i (length lines))
			   t)
			  (t nil)))
		 (let ((line (nth i lines)))
		   (cond ((wfv? line)
			  ;(format t " Adding wfv .... ~A ~%" i)
			  (push (parse-wfv line) m-vertexes))
			 ((mtl? line)
			  (setf texture-key (parse-mtl line)))
			 ((wfvn? line)
			  ;(format t " Adding wfvn .... ~A ~%" i)
			  (push (parse-wfvn line) m-normals))
			 ((wft? line)
			  ;(format t " Adding wft .... ~A ~A ~A ~A ~A  ~%" i triangles nv nvt nvn)
			  (let ((tri (parse-wft line nv nvt nvn)))
			     (push tri  m-triangles)))
			 ((wfvt? line)
			  ;(format t " Adding wfvt .... ~A ~%" i)
			  (let ((parsed (parse-wfvt line)))
			    (if parsed
			      (push (parse-wfvt line) m-textures))))
			 (t nil))))
	       (incf nv (length m-vertexes))
	       (incf nvt (length m-textures))
  	       (format t " -- Number of normals is ~A ~% ---- " (length m-normals))
	       (incf nvn (length m-normals))
	       (setf num-of-triangles (length m-triangles))
	       (setf triangles (build-triangles (reverse m-triangles)))
	       (setf num-of-vertices (length m-vertexes))
	       (setf vertices (build-vertexes-with-textures (reverse m-vertexes)
							    (reverse m-triangles)
							    (reverse m-textures)))
	       (compute-normals (reverse m-vertexes)
			        (reverse m-triangles)
			        (reverse m-normals))
	       (push wfmesh all-meshes))))))
	(setf meshes (reverse all-meshes))
	(setf num-of-meshes (length all-meshes))
        wfmesh)))

(defun load-atlas-obj (obj-file mtl-file)
  (format t "--- inside load-atlas-obj with materials ~A ~A ~%" obj-file mtl-file)
  (let ((lines (file-lines obj-file))
	(materials (load-mtl mtl-file))
	(wfmesh (make-instance 'meshes))
	(all-meshes) (nv 1) (nvt 1) (nvn 1)) 
   (with-slots (num-of-meshes meshes) wfmesh
     (do ((n 0 (+ n 1)))
	 ((= n (length lines)))
       (let ((line (nth n lines)))
	 (if (wfobj? line)
	   (let ((wfmesh (make-instance 'mesh))	
		 (m-texture-keys (make-hash-table :test #'equal))
		 (m-vertexes) (m-triangles) (m-textures) (m-normals))
	     (with-slots (name num-of-vertices vertices texture-key 
			  num-of-triangles triangles orig-vertexes orig-triangles
			  orig-textures orig-normals texture-keys) wfmesh 
	       (format t "Loading a new mesh at line .... ~A ~%" n)
	       (setf name (parse-wfobj line))
	       (do ((i (+ n 1) (+ i 1)))
		   ((cond ((wfobj? (nth i lines))
			   (setf i (- n 1))
			   t) ; reset pointer back so we don't miss next mesh
			  ((= i (length lines))
			   t)
			  (t nil)))
		 (let ((line (nth i lines)))
		   (cond ((wfv? line)
			  ;(format t " Adding wfv .... ~A ~%" i)
			  (push (parse-wfv line) m-vertexes))
			 ((mtl? line)
			    (let ((key (gethash (parse-mtl line) materials)))
			      (format t " ---- material key -> file is ~A ~%" key)
			      (setf texture-key key)))
			 ((wfvn? line)
			  ;(format t " Adding wfvn .... ~A ~%" i)
			  (push (parse-wfvn line) m-normals))
			 ((wft? line)
			  ;(format t " Adding wft .... ~A ~A ~A ~A ~A  ~%" i triangles nv nvt nvn)
			  (let ((tri (parse-wft line nv nvt nvn)))
			    (if texture-key
			      (multiple-value-bind  (val found) 
				   (gethash texture-key m-texture-keys)
				(format t "--- Found ~A texture-key----~A with values ~A ~%" found texture-key (length val))
				(format t "--- Parsed triangle is ~A ~%" tri)
				(if found
				   (progn
				     (push tri val)
				     (setf (gethash texture-key m-texture-keys)
					    val))
				   (let ((grouped-triangles))
				      ;(format t "--- Creating list of triangles for texture-key----~A ~%" texture-key)
				      (push tri grouped-triangles)
				      ;(format t "--- grouped triangles : ~A ~% " grouped-triangles)
				      (setf (gethash texture-key m-texture-keys)
					    grouped-triangles)))))
			     ;(format t "--- Now texture key entry has  : ~A values ~%" 
			;		      (length (gethash texture-key m-texture-keys)))
			     (push tri  m-triangles)))
			 ((wfvt? line)
			  ;(format t " Adding wfvt .... ~A ~%" i)
			  (let ((parsed (parse-wfvt line)))
			    (if parsed
			      (push (parse-wfvt line) m-textures))))
			 (t nil))))
	       (incf nv (length m-vertexes))
	       (incf nvt (length m-textures))
  	       (format t " -- Number of normals is ~A ~% ---- " (length m-normals))
	       (incf nvn (length m-normals))
	       (setf num-of-triangles (length m-triangles))
	       (setf triangles (build-triangles (reverse m-triangles)))
	       (setf num-of-vertices (length m-vertexes))
	       (setf vertices (build-vertexes-with-textures (reverse m-vertexes)
							    (reverse m-triangles)
							    (reverse m-textures)))
	       (compute-normals (reverse m-vertexes)
			        (reverse m-triangles)
			        (reverse m-normals))
	       (setf orig-vertexes m-vertexes
		     orig-textures m-textures
		     orig-triangles m-triangles
		     orig-normals m-normals
	             texture-keys m-texture-keys)
	        (dolist (lattice (build-atlas-lattice wfmesh))	
	          (push lattice all-meshes)))))))
	(setf meshes (reverse all-meshes))
	(setf num-of-meshes (length all-meshes))
        wfmesh)))

;;; an atlas obj means a lattice where groups of faces have one texture

(defun build-atlas-lattice (wf-lattice)
  (format t " ------ BUILDING ATLAS LATTICE ~A ~%" (mesh-name wf-lattice))
  (with-slots (texture-keys) wf-lattice
    (let ((entries (hash-table-count texture-keys)))
      (format t " ---- Number of texture-keys is ~A ~%" entries)
      (if (= entries 1)
	(list wf-lattice)
	(let ((acc))
	   (with-slots (name num-of-vertices vertices texture-key 
			num-of-triangles triangles orig-vertexes orig-triangles
			orig-textures orig-normals texture-keys) wf-lattice 
	      (maphash #'(lambda (key grouped-triangles)
			  (format t "----- handling key ~A with ~A triangles ~%" key 
										(length grouped-triangles))
			  (let ((new-lattice (make-instance 'wfmesh)))
			    (with-slots ((new-name name) (new-nov num-of-vertices) 
					 (new-vertices vertices) (new-tk texture-key)
					 (new-not num-of-triangles) (new-tris triangles)) new-lattice 
			      (setf new-name (concatenate 'string "lattice-" key))
			      (format t "=========> ASSIGNING NAME ~A to new lattice ~%" new-name)
			      (setf new-tk key)	
			      (format t "=========> ASSIGNING TEXTURE KEY ~A to new lattice ~%" new-tk)
			      (multiple-value-bind (scaled-vertices mapped-vertices)
				    (build-vertexes-with-textures-for-atlas-lattice (reverse orig-vertexes)
							    			    (reverse grouped-triangles)
							    			    (reverse orig-textures))
			        (setf new-not (length grouped-triangles))
			        (setf new-tris (build-triangles-for-atlas-lattice (reverse grouped-triangles)
										  mapped-vertices)) 
			        (setf new-vertices (reverse scaled-vertices))
			        (format t "--- VERTICES OF ATLAS LATTICE ARE ~A ~%" (length new-vertices))
			        (setf new-nov (length new-vertices)) 
			        (compute-normals (reverse scaled-vertices)
			        	         (build-scaled-triangles-for-atlas-lattice grouped-triangles
											   mapped-vertices)
			        	         (reverse orig-normals))	
			        (push new-lattice acc)))))
		     texture-keys))
	    (format t "--- NUMBER OF NEW LATTICES IS ~A ~%" (length acc))
	    acc)))))
	 

(defun build-triangles (triangles)
  (mapcar #'(lambda (tri-list)
	      (let ((tri (make-instance 'mesh-triangle)))
		(with-slots (vertex1 vertex2 vertex3) tri
		  (setf vertex1 (nth 0 tri-list)
			vertex2 (nth 1 tri-list)
			vertex3 (nth 2 tri-list)))
		tri))
	  triangles))

(defun get-scaled-vertex-index (old-index mapped-vertices)
  (format t "--- Old index is ~A ~%" old-index)
  (let ((vertex (gethash old-index mapped-vertices)))
    (format t "----- vertex is ~A ~%" vertex)
    (with-slots (scaled-index) vertex
 	(format t "     --- scaled index is ~A ~%" scaled-index)
	scaled-index)))

(defun build-triangles-for-atlas-lattice (triangles mapped-vertices)
  (mapcar #'(lambda (tri-list)
	      (let ((tri (make-instance 'mesh-triangle)))
		(with-slots (vertex1 vertex2 vertex3) tri
		  (setf vertex1 (get-scaled-vertex-index (nth 0 tri-list) mapped-vertices)
			vertex2 (get-scaled-vertex-index (nth 1 tri-list) mapped-vertices)
			vertex3 (get-scaled-vertex-index (nth 2 tri-list) mapped-vertices)))
		tri))
	  triangles))

(defun build-scaled-triangles-for-atlas-lattice (triangles mapped-vertices)
  (mapcar #'(lambda (tri-list)
	      (list (get-scaled-vertex-index (nth 0 tri-list) mapped-vertices)
		    (get-scaled-vertex-index (nth 1 tri-list) mapped-vertices)
		    (get-scaled-vertex-index (nth 2 tri-list) mapped-vertices)
		    (nth 3 tri-list) (nth 4 tri-list) (nth 5 tri-list)
		    (nth 6 tri-list) (nth 7 tri-list) (nth 8 tri-list)))
	  triangles))

(defun build-vertexes-with-textures-for-atlas-lattice (vertexes triangles textures)
  (let ((all-vertices))
    (dolist (tri triangles)
      (push (list (first tri) (fourth tri)) all-vertices)
      (push (list (second tri) (fifth tri)) all-vertices)
      (push (list (third tri) (sixth tri)) all-vertices))
    (format t "--- all vertices are ~A ~%" all-vertices)
    (let ((acc) (i 0) (mapped-vertices (make-hash-table))
	  (unique-vertices (sort (remove-duplicates all-vertices :test #'= :key #'car) 
				 #'<= :key #'car)))
	(format t "--- unique vertices are ~A ~%" unique-vertices)
	(dolist (vt unique-vertices)
	  (format t " --- Handling vertex num ~A ~%" vt)
	  (let ((vertex (nth (first vt) vertexes))
		(tex-uv (nth (second vt) textures)))
	     (let ((new-texuv (make-instance 'tex-uv))
		   (new-pos (make-instance 'vec))
		   (new-vertex (make-instance 'mesh-vertex)))
	       (with-slots ((pos vec)) vertex
		 (with-slots (x y z) pos
		    (with-slots ((nx x) (ny y) (nz z)) new-pos
		      (with-slots ((npos vec)) new-vertex
			(setf nx x ny y nz z)
			(setf npos new-pos)))))
	       (with-slots (u v) tex-uv
		  (with-slots ((nu u) (nv v)) new-texuv
	             (with-slots (texuv) new-vertex
			(setf nu u nv v)
			(setf texuv new-texuv))))
	       (with-slots (scaled-index) new-vertex
		  (setf scaled-index i)
		  (incf i))
	       (setf (gethash (car vt) mapped-vertices) new-vertex)
	       (push new-vertex acc))))
 	(format t "--- NUMBER OF VERTICES IN ATLAS LATTICE IS ~A ~%" (length acc))	
	(format t "--- Mapped vertices are ~A ~%" mapped-vertices)
	(values acc mapped-vertices))))
		    

(defun build-vertexes-with-textures (vertexes triangles textures)
  (format t "--- inside build-vertexes-with-textures ~%")
  (let ((vtn-map nil))
    (dolist (tri triangles)
      (push (list (first tri) (fourth tri) (seventh tri)) vtn-map)
      (push (list (second tri) (fifth tri) (eighth tri)) vtn-map)
      (push (list (third tri) (sixth tri) (ninth tri)) vtn-map))
    ;(format t " --- vtn map is ~A ~%" vtn-map) 
    (let ((acc nil)
	  (filtered-map (make-hash-table)))
      (dolist (vtn (sort vtn-map #'<= :key #'car))
	(multiple-value-bind (obj found)
	    (gethash (first vtn) filtered-map)
	  (when (not found)
	    (let ((tex-uv (nth (second vtn) textures))
		  (vertex (nth (first vtn) vertexes)))
	      (with-slots (texuv) vertex
		 (setf texuv tex-uv))
	      (setf (gethash (first vtn) filtered-map) 
		    (second vtn))))))
      vertexes)))

		      
     
	

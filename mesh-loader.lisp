(in-package #:cl-game-models)

(defun load-mesh (file)
  (format t "--- inside load-mesh ~%")
  (let ((lines (file-lines file))
	(md5mesh (make-instance 'md5meshes))
	(all-meshes))
   (with-slots (version num-of-joints joints 
		num-of-meshes meshes) md5mesh
     (do ((n 0 (+ n 1)))
	 ((= n (length lines)))
       (let ((line (nth n lines)))
	 (cond ((version? line)
		(setf version (parse-version line)))
	       ((n-joints? line)
		(setf num-of-joints (parse-n-joints line)))
	       ((n-meshes? line)
		(setf num-of-meshes (parse-n-meshes line)))
	       ((joints? line)
		(setf joints 
		      (parse-joints (subseq lines (+ n 1) 
						  (+ n num-of-joints 1))))
		(setf n (+ n num-of-joints 2)))
	       ((mesh? line)
		;(format t "Parsing mesh at line ~A ~%" n)
		(let ((mesh (make-instance 'md5mesh)))
		  (with-slots (shader num-of-vertices vertices
			       num-of-triangles triangles
			       num-of-weights weights) mesh
		    (do ((i (+ n 1) (+ i 1)))
			((mesh-ends? (nth i lines)) 
			 (setf n (+ i 1)))
		      (let ((line (nth i lines)))
			(cond ((shader? line)
			       (setf shader (parse-shader line)))  
			      ((n-vertices? line)
			       ;(format t "Parsing vertices at line ~A ~%" i)
			       (let ((nv (parse-n-vertices line)))
				 (setf num-of-vertices nv)
				 (setf vertices 
				       (parse-vertices (subseq lines (+ i 1)
								     (+ i nv 1))))
				 ;(format t "After parsing vertices, line is, nv is ~A ~A ~%" i nv)
				 (setf i (+ i nv))))
			       ((n-triangles? line)
				;(format t "Parsing triangles at line ~A ~%" i)
				(let ((nt (parse-n-triangles line)))
				  (setf num-of-triangles nt)
				  (setf triangles
					(parse-triangles (subseq lines (+ i 1)
								       (+ i nt 1))))
				 ;(format t "After parsing triangles, line is, nv is ~A ~A ~%" i nt)
				  (setf i (+ i nt 1))))
			       ((n-weights? line)
				;(format t "Parsing weights at line ~A ~%" i)
				(let ((nw (parse-n-weights line)))
				  (setf num-of-weights nw)
				  (setf weights
					(parse-weights (subseq lines (+ i 1)
								     (+ i nw 1))))
				 ;(format t "After parsing weights, line is, nv is ~A ~A ~%" i nw)
				  (setf i (+ i nw))))
			       (t nil)))))
                      (with-slots (num-of-vertices ) mesh
                        (if (> num-of-vertices 0)
		          (push mesh all-meshes)
                          (decf num-of-meshes)))))
	       (t nil))))
     (setf meshes (nreverse all-meshes)))
     md5mesh))
